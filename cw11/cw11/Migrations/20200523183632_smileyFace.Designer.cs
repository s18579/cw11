// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using cw11.Models;

namespace cw11.Migrations
{
    [DbContext(typeof(CodeFirstContext))]
    [Migration("20200523183632_smileyFace")]
    partial class smileyFace
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("cw11.Models.Doctor", b =>
                {
                    b.Property<int>("IdDoctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("IdDoctor")
                        .HasName("Doctor_PK");

                    b.ToTable("Doctor");

                    b.HasData(
                        new
                        {
                            IdDoctor = 1,
                            Email = "jsparrow@gmail.com",
                            FirstName = "Jacek",
                            LastName = "Sieczko"
                        },
                        new
                        {
                            IdDoctor = 2,
                            Email = "pjpyta@gmail.com",
                            FirstName = "Adam",
                            LastName = "Brodka"
                        },
                        new
                        {
                            IdDoctor = 3,
                            Email = "xhvqyo@gmail.com",
                            FirstName = "Adrian",
                            LastName = "Bednarek"
                        },
                        new
                        {
                            IdDoctor = 4,
                            Email = "no1special@gmail.com",
                            FirstName = "Filip",
                            LastName = "Lysy"
                        },
                        new
                        {
                            IdDoctor = 5,
                            Email = "logico@gmail.com",
                            FirstName = "Dominik",
                            LastName = "Logiczny"
                        });
                });

            modelBuilder.Entity("cw11.Models.Medicament", b =>
                {
                    b.Property<int>("IdMedicament")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("IdMedicament")
                        .HasName("Medicament_PK");

                    b.ToTable("Medicament");

                    b.HasData(
                        new
                        {
                            IdMedicament = 1,
                            Description = "2/10 too much water",
                            Name = "IGN",
                            Type = "rak"
                        },
                        new
                        {
                            IdMedicament = 2,
                            Description = "bardzo smaczne",
                            Name = "Pawulon",
                            Type = "eutanazja"
                        },
                        new
                        {
                            IdMedicament = 3,
                            Description = "meltuje glowe",
                            Name = "Krokodil",
                            Type = "drug"
                        },
                        new
                        {
                            IdMedicament = 4,
                            Description = "j***e kawusie i bedzie git",
                            Name = "Kawusia",
                            Type = "kawusia"
                        },
                        new
                        {
                            IdMedicament = 5,
                            Description = "smaczne",
                            Name = "Drink",
                            Type = "drug"
                        });
                });

            modelBuilder.Entity("cw11.Models.Patient", b =>
                {
                    b.Property<int>("IdPatient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("IdPatient")
                        .HasName("Patient_PK");

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            IdPatient = 1,
                            BirthDate = new DateTime(2020, 5, 23, 20, 36, 31, 958, DateTimeKind.Local).AddTicks(4020),
                            FirstName = "Jan",
                            LastName = "Dzban"
                        },
                        new
                        {
                            IdPatient = 2,
                            BirthDate = new DateTime(2020, 5, 23, 20, 36, 31, 961, DateTimeKind.Local).AddTicks(2736),
                            FirstName = "Michał",
                            LastName = "RPG"
                        },
                        new
                        {
                            IdPatient = 3,
                            BirthDate = new DateTime(2020, 5, 23, 20, 36, 31, 961, DateTimeKind.Local).AddTicks(2791),
                            FirstName = "Mirosław",
                            LastName = "Wykop"
                        },
                        new
                        {
                            IdPatient = 4,
                            BirthDate = new DateTime(2020, 5, 23, 20, 36, 31, 961, DateTimeKind.Local).AddTicks(2797),
                            FirstName = "Mirosława",
                            LastName = "Wykop"
                        },
                        new
                        {
                            IdPatient = 5,
                            BirthDate = new DateTime(2020, 5, 23, 20, 36, 31, 961, DateTimeKind.Local).AddTicks(2801),
                            FirstName = "imie5",
                            LastName = "nazwisko5"
                        });
                });

            modelBuilder.Entity("cw11.Models.PresMedi", b =>
                {
                    b.Property<int>("IdMedicament")
                        .HasColumnType("int");

                    b.Property<int>("IdPrescription")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Dose")
                        .HasColumnType("int");

                    b.HasKey("IdMedicament", "IdPrescription");

                    b.HasIndex("IdPrescription");

                    b.ToTable("PresMedi");

                    b.HasData(
                        new
                        {
                            IdMedicament = 1,
                            IdPrescription = 5,
                            Details = "cos",
                            Dose = 2137
                        },
                        new
                        {
                            IdMedicament = 2,
                            IdPrescription = 4,
                            Details = "cos",
                            Dose = 1337
                        },
                        new
                        {
                            IdMedicament = 3,
                            IdPrescription = 3,
                            Details = "cos",
                            Dose = 12
                        },
                        new
                        {
                            IdMedicament = 4,
                            IdPrescription = 2,
                            Details = "cos",
                            Dose = 1
                        },
                        new
                        {
                            IdMedicament = 5,
                            IdPrescription = 1,
                            Details = "cos",
                            Dose = 5
                        });
                });

            modelBuilder.Entity("cw11.Models.Prescription", b =>
                {
                    b.Property<int>("IdPrescription")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdDoctor")
                        .HasColumnType("int");

                    b.Property<int>("IdPatient")
                        .HasColumnType("int");

                    b.HasKey("IdPrescription")
                        .HasName("Prescription_PK");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdPatient");

                    b.ToTable("Prescription");

                    b.HasData(
                        new
                        {
                            IdPrescription = 1,
                            Date = new DateTime(2020, 6, 13, 20, 36, 31, 965, DateTimeKind.Local).AddTicks(553),
                            DueDate = new DateTime(2020, 6, 29, 20, 36, 31, 965, DateTimeKind.Local).AddTicks(1109),
                            IdDoctor = 5,
                            IdPatient = 1
                        },
                        new
                        {
                            IdPrescription = 2,
                            Date = new DateTime(2020, 6, 13, 20, 36, 31, 965, DateTimeKind.Local).AddTicks(2345),
                            DueDate = new DateTime(2020, 6, 29, 20, 36, 31, 965, DateTimeKind.Local).AddTicks(2364),
                            IdDoctor = 4,
                            IdPatient = 2
                        },
                        new
                        {
                            IdPrescription = 3,
                            Date = new DateTime(2020, 6, 13, 20, 36, 31, 965, DateTimeKind.Local).AddTicks(2388),
                            DueDate = new DateTime(2020, 6, 29, 20, 36, 31, 965, DateTimeKind.Local).AddTicks(2391),
                            IdDoctor = 3,
                            IdPatient = 3
                        },
                        new
                        {
                            IdPrescription = 4,
                            Date = new DateTime(2020, 6, 13, 20, 36, 31, 965, DateTimeKind.Local).AddTicks(2395),
                            DueDate = new DateTime(2020, 6, 29, 20, 36, 31, 965, DateTimeKind.Local).AddTicks(2398),
                            IdDoctor = 2,
                            IdPatient = 4
                        },
                        new
                        {
                            IdPrescription = 5,
                            Date = new DateTime(2020, 6, 13, 20, 36, 31, 965, DateTimeKind.Local).AddTicks(2402),
                            DueDate = new DateTime(2020, 6, 29, 20, 36, 31, 965, DateTimeKind.Local).AddTicks(2405),
                            IdDoctor = 1,
                            IdPatient = 5
                        });
                });

            modelBuilder.Entity("cw11.Models.PresMedi", b =>
                {
                    b.HasOne("cw11.Models.Medicament", "Medicament")
                        .WithMany("PrescriptionMedicament")
                        .HasForeignKey("IdMedicament")
                        .HasConstraintName("Medicament-Prescription_Medicament")
                        .IsRequired();

                    b.HasOne("cw11.Models.Prescription", "Prescription")
                        .WithMany("PresMedi")
                        .HasForeignKey("IdPrescription")
                        .HasConstraintName("Prescription_Prescription_Medicament")
                        .IsRequired();
                });

            modelBuilder.Entity("cw11.Models.Prescription", b =>
                {
                    b.HasOne("cw11.Models.Doctor", "Doctor")
                        .WithMany("Prescriptions")
                        .HasForeignKey("IdDoctor")
                        .HasConstraintName("Prescription-Doctor")
                        .IsRequired();

                    b.HasOne("cw11.Models.Patient", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("IdPatient")
                        .HasConstraintName("Prescription-Patient")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
